#!/usr/bin/env bash
# shellcheck disable=SC1117
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 USBhost
# Copyright (C) 2016-2017 Joe Maples
# Copyright (C) 2017-2018 Nathan Chancellor
#
# GCC cross compiler  compilation script


###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu
# https://github.com/cbeck88/mingw-w64-gcc-linux/blob/master/build.sh
# https://www.reactos.org/wiki/Building_MINGW-w64
# http://cazencott.info/index.php/post/2016/03/14/Local-user-installation-of-gcc
# https://wiki.dlang.org/GDC/Cross_Compiler/Existing_Sysroot
# https://www.goliath32.com/blog/2016-12-05.html


#############
# FUNCTIONS #
#############

set -e

# shellcheck disable=SC1090
source "${BASH_SOURCE%/*}/configs/common.sh"
# shellcheck disable=SC1090
source "${BASH_SOURCE%/*}/configs/tar_source_config.sh"
# shellcheck disable=SC1090
source "${BASH_SOURCE%/*}/configs/git_source_config.sh"
# shellcheck disable=SC1090
source "${BASH_SOURCE%/*}/configs/target_config.sh"

# Source all build functions
for source_file in "${BASH_SOURCE%/*}"/scripts/*.sh; do
    # shellcheck disable=SC1090
    source "$source_file"
done


function call_cmd() {
    echo "CMD being executed: ${*}"
    local cmd_to_call="${*}"

    if [[ ! -z "${VERBOSE}" ]]; then
        eval "${cmd_to_call}"
    else
        eval "${cmd_to_call} > /dev/null 2>&1"
    fi
}

# Help menu function
function help_menu() {

    local supported_archs
    supported_archs=$(find "${BASH_SOURCE%/*}"/configs/targets/ -maxdepth 1 -name '*.sh' -exec basename {} \; | cut -d. -f1 | sed ':a;N;$!ba;s/\n/, /g')

    echo
    echo "${BOLD}OVERVIEW:${RST} Build a gcc toolchain"
    echo
    echo "${BOLD}USAGE:${RST} ${0} <options>"
    echo
    echo "${BOLD}EXAMPLE:${RST} ${0} -a arm64 -v 12"
    echo
    echo "${BOLD}REQUIRED PARAMETERS:${RST}"
    echo "  -a  | --arch:        This is the toolchain's target architecture."
    echo "                       Supported:"
    for i in ${supported_archs}
    do
        # call your procedure/other scripts here below
        echo "                         - ${i//,/ }"
    done
    echo
    echo "  -v  | --version:     Possible values: (10, 11, 12 13 and master. This is the GCC version to build."
    echo
    echo "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo "  -f  | --full-src:    Download full git repos instead of shallow clones"
    echo "  -p  | --package:     Possible values: gz or xz. Compresses toolchain after build."
    echo "  -t  | --tarballs:    Use tarballs for binutils, ISL, and, GCC"
    echo "  -V  | --verbose:     Make script print all output, not just errors and the ending information"
    echo
}

# Prints a formatted header to let the user know what's being done
function header() {
    # shellcheck disable=SC2034
    echo -e "${GRN}====$(for i in $(seq ${#1}); do echo -e "=\c"; done)===="
    echo -e "==  ${1}  =="
    # shellcheck disable=SC2034
    echo -e "====$(for i in $(seq ${#1}); do echo -e "=\c"; done)====${RST}"
}

# Prints an error in bold red
function die() {
    echo ""
    echo -e "${RED}${1}${RST}"
    [[ "${*}" =~ "-n" ]] && echo
    [[ "${*}" =~ "-h" ]] && help_menu
    exit
}

# Prints a warning in bold yellow
function warn() {
    echo ""
    echo "${YLW}${1}${RST}"
    [[ "${*}" =~ "-n" ]] && echo
}

# Formats the time for the end
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# git clone wrapper
function git_clone() {
    local url=$1
    local folder=$2
    local branch=$3
    call_cmd git clone ${DEPTH_FLAG:+"--depth=1"} "${url}" "${folder}" -b "${branch}"
}

function extract() {
    mkdir -p "${2}"
    call_cmd tar xvf "${1}" -C "${2}" --strip-components=1
}

function fetch_source() {
    local full_url=$1
    local folder=$2

    local url_array=""
    mapfile -t url_array < <(echo "${full_url}" | tr ";" "\n")

    local url=${url_array[0]}
    local url_type=""
    local found=false
    local branch=""

    header "FETCHING ${full_url}"

    # find type:
    for type in "${url_array[@]}"; do
      # shellcheck disable=SC2015
      echo "${type}" | grep -q "type=" && local exit_code=$? || local exit_code=$?
      if [ ${exit_code} = 0 ]; then
        url_type=${type#*type=}
        found=true
        break
      fi
    done
    ${found} || die "No valid type found in url ${full_url}!"
    found=false
    echo "urltype ${url_type}"

    # Check if it is a tarball
    if [ "${url_type}" = "tar" ]; then
        local file_name=""
        file_name=$(basename "${url}")
        call_cmd wget -c "${url}"
        extract "${file_name}" "${folder}"
        return
    fi

    # find branch:
    for branch in "${url_array[@]}"; do
      # shellcheck disable=SC2015
      echo "${branch}" | grep -q "branch=" && local exit_code=$? || local exit_code=$?
      if [ ${exit_code} = 0 ]; then
        branch=${branch#*branch=}
        found=true
        break
      fi
    done
    ${found} || die "No valid branch found in url ${full_url}!"
    found=false
    echo "BRANCH: ${branch}"

    # Check if it is a git repo
    if [ "${url_type}" = "git" ]; then
        if [[ ! -d git_${folder} ]]; then
            git_clone "${url}" "git_${folder}" "${branch}"
            # Now make a symlink
            ln -sfn "${SOURCES_DIR}/git_${folder}" "${SOURCES_DIR}/${folder}"
        fi
        return
    fi

    # Check if it is a svn repo
    if [ "${url_type}" = "svn" ]; then
        if [[ ! -d ${folder} ]]; then
            svn co "${url}${branch}" "${folder}"
        fi
        return
    fi
}

function set_build_state() {
    touch "${BUILD_STATE_DIR}/${1}"
}

function check_build_state() {
    if [ -e "${BUILD_STATE_DIR}/${1}" ];then
        return 0
    else
        return 1
    fi
}

# Initial setup
function setup_variables() {
    # Colors
    BOLD="\033[1m"
    RED="\033[01;31m"
    RST="\033[0m"
    YLW="\033[01;33m"
    GRN="\033[1;32m"

    # shellcheck disable=SC2034
    JOBS="-j$(($(nproc --all) + 1))"

    # Start of script
    START=$(date +%s)
}

function setup_environment() {
    ROOT="${PWD}"
    SOURCES_DIR="${ROOT}/sources"
    TOOLS_ROOT_DIR="${BASH_SOURCE%/*}"
    PATCHES_DIR="${BASH_SOURCE%/*}/patches"
    BUILD_STATE_DIR="${ROOT}/state"
    # shellcheck disable=SC2034
    BUILD_DIR="${ROOT}/build_dir"
    INSTALL_DIR="/opt/local"
    INSTALL_DIR_NAME="cross-tool-${ARCH}-gcc${VERSION}"
    INSTALL="${INSTALL_DIR}/${INSTALL_DIR_NAME}"

    # Maybe not needed!?
    export PATH=${INSTALL}/bin:${PATH}

    mkdir -p "${SOURCES_DIR}"
    mkdir -p "${BUILD_STATE_DIR}"
    mkdir -p "${INSTALL}"
}

# Parse parameters
function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case "${1}" in
            # REQUIRED FLAGS
            "-a"|"--arch") shift && ARCH=${1} ;;
            "-v"|"--version") shift && VERSION=${1} ;;

            # OPTIONAL FLAGS
            "-f"|"--full-src") FULL_SOURCE=true ;;
            "-p"|"--package") COMPRESSION=true ;;
            "-t"|"--tarballs") TARBALLS=true ;;
            "-V"|"--verbose") VERBOSE=true ;;

            # HELP!
            "-h"|"--help") help_menu; exit ;;
        esac

        shift
    done

    [[ -z ${FULL_SOURCE} ]] && DEPTH_FLAG=true

    setup_environment

    if [[ -z ${TARBALLS} ]]; then
        # Search for a valid target config
        type -t "config_${ARCH}" > /dev/null || die "No git config found for ${ARCH}!"
        "config_${ARCH}" "${VERSION}" git
    else
        # Search for a valid target config
        type -t "config_${ARCH}" > /dev/null || die "No tar config found for ${ARCH}!"
        "config_${ARCH}" "${VERSION}" tar
    fi
}

function download_sources() {

    cd "${ROOT}"
    # use clean hashtable
    hash -r

    cd "${SOURCES_DIR}" || die "Failed to create sources directory!"

    for download_func in "${DOWNLOAD_FUNCS[@]}"
    do
        local package
        package=$(echo "${download_func}" | awk '{print $NF}')
        check_build_state "download_${package}" && continue
        ${download_func}
        set_build_state "download_${package}"
    done

    cd "${ROOT}"
}

function patch_sources() {

    cd "${ROOT}"
    # use clean hashtable
    hash -r

    for patch in "${PATCHES[@]}"
    do
        patch_full_path=$(echo "${patch}" | awk '{print $NF}')
        patch_name=$(basename "${patch_full_path}" ".patch")
        package_dir=$(echo "${patch}" | awk '{print $1}')
        check_build_state "patch_${patch_name}" && continue
        [[ -d "${SOURCES_DIR}/${package_dir}" ]] && patch -d ${SOURCES_DIR}/${package_dir} -p1 < ${PATCHES_DIR}/${patch_full_path}
        set_build_state "patch_${patch_name}"
    done 

    cd "${ROOT}"
}

# Package toolchain
function package_tc() {

    check_build_state "${FUNCNAME[0]}" && return
    cd "${ROOT}"
    # use clean hashtable
    hash -r

    if [[ -n ${COMPRESSION} ]]; then
        local tar_package=${TARGET}-${VERSION}-$(TZ=UTC date +%Y%m%d).tar.xz
        header "PACKAGING TOOLCHAIN"
        echo "Target file: ${tar_package}"
        tar cf ${tar_package} -C ${INSTALL_DIR} ${INSTALL_DIR_NAME}
    fi

    set_build_state "${FUNCNAME[0]}"
}

# Ending information
function ending_info() {

    check_build_state "${FUNCNAME[0]}" && return
    cd "${ROOT}"
    # use clean hashtable
    hash -r

    END=$(date +%s)

    if [[ -e ${INSTALL}/bin/${TARGET}-gcc ]]; then
        header "BUILD SUCCESSFUL"
        echo -e "${BOLD}Script duration:${RST} $(format_time "${START}" "${END}")"
        # shellcheck disable=SC2086
        echo -e "${BOLD}GCC version:${RST} $(${INSTALL}/bin/${TARGET}-gcc --version | head -n 1)"
        if [[ -n ${COMPRESSION} ]] && [[ -e ${PACKAGE} ]]; then
            echo -e "${BOLD}File location:${RST} $(pwd)/${PACKAGE}"
            echo -e "${BOLD}File size:${RST} $(du -h "${PACKAGE}" | awk '{print $1}')"
        else
            echo -e "${BOLD}Toolchain location:${RST} ${INSTALL}"
        fi
    else
        header "BUILD FAILED"
    fi

    # Alert to script end
    echo -e "\a"

    set_build_state "${FUNCNAME[0]}"
}

parse_parameters "${@}"
setup_variables
download_sources
patch_sources

# Go through all build functions
for build_func in "${BUILD_FUNCS[@]}"
do
    ${build_func}
done

package_tc
ending_info
